/** @file lista.h
 *  @brief ...
 *
 *  @details ....
 */

#ifndef LISTA_HPP
#define LISTA_HPP

#include <stdio.h>
#include <stdlib.h>

typedef struct pos {
// data
int data; //**< ... */
// pointer to next element
struct pos* next; //**< ... */
} pos_t;

/**
 *  @brief ...
 *  @details ...
 *  @param ...
 *  @return ...
 **/
pos_t* createList(int first_value); //READY

/**
 *  @brief ...
 *  @details ...
 *  @param ...
 *  @return ...
 **/
pos_t* readList(const char* filePath);

/**
 *  @brief ...
 *  @details ...
 *  @param ...
 *  @return ...
 **/
void writeList(pos_t* head, const char* filePath);

/**
 *  @brief ...
 *  @details ...
 *  @param ...
 *  @return ...
 **/
int push_back(pos_t* head, int new_value);//LISTO

/**
 *  @brief ...
 *  @details ...
 *  @param ...
 *  @return ...
 **/
int push_front(pos_t** head, int new_value); //LISTO

/**
 *  @brief ...
 *  @details ...
 *  @param ...
 *  @return ...
 **/
int pop_back(pos_t* head);//LISTO

/**
 *  @brief ...
 *  @details ...
 *  @param ...
 *  @return ...
 **/
int pop_front(pos_t** head);//LISTO

/**
 *  @brief ...
 *  @details ...
 *  @param ...
 *  @return ...
 **/
int insertElement(pos_t** head, int pos, int new_value);

/**
 *  @brief ...
 *  @details ...
 *  @param ...
 *  @return ...
 **/
void removeElement(pos_t** head, int pos);

/**
 *  @brief ...
 *  @details ...
 *  @param ...
 *  @return ...
 **/
int walkList(pos_t* head, int (*function)(int), int limit);

/**
 *  @brief ...
 *  @details ...
 *  @param ...
 *  @return ...
 **/
int freeList(pos_t* head);

/**
 *  @brief ...
 *  @details ...
 *  @param ...
 *  @return ...
 **/
int getElement(pos_t* head, int index, int* valid);

/**
 *  @brief ...
 *  @details ...
 *  @param ...
 *  @return ...
 **/
int printElement(const int value);

/**
 *  @brief ...
 *  @details ...
 *  @param ...
 *  @return ...
 **/
void sort(pos_t* head, char dir);

/**
 *  @brief ...
 *  @details ...
 *  @param ...
 *  @return ...
 **/
void printList(pos_t* head); //READY

#endif
